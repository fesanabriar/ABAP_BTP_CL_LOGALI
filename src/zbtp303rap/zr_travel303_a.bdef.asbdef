managed;
strict ( 2 );
with draft;

define behavior for ZR_TRAVEL303_A alias Travel
implementation in class zbp_r_travel303_a unique
persistent table ztravel303_a
draft table ztravel303_d
lock master
total etag LastChangedAt
etag master LocalLastChangedAt
authorization master ( global, instance )

{
  create ( precheck );
  update ( precheck );
  delete;
  association _Booking { create ( features : instance, authorization : update ); with draft; }

  field ( numbering : managed, readonly ) TravelUUID;
  field ( readonly ) TravelID,
  OverallStatus,
  TotalPrice,
  LocalCreatedAt,
  LocalCreatedBy,
  LocalLastChangedAt,
  LocalLastChangeBy;
  field ( mandatory ) CustomerID, AgencyID, BeginDate, EndDate, CurrencyCode;
  field ( features : instance ) BookingFee;

  action ( features : instance, authorization : update ) acceptTravel result [1] $self;
  action ( features : instance, authorization : update ) rejectTravel result [1] $self;
  action ( features : instance, authorization : update ) deductDiscount parameter Za_travel_disc303_A result [1] $self;
  internal action reCalcTotalPrice;

  determination setTravelNumber on save { create; }
  determination setStatusToOpen on modify { create; }
  determination calculateTotalPrice on modify { create; field BookingFee, CurrencyCode; }

  validation validateCustomer on save { create; field CustomerID; }
  validation validateAgency on save { create; field AgencyID; }
  validation validateDates on save { create; field BeginDate, EndDate; }
  validation validateCurrencyCode on save { create; field CurrencyCode; }

  determine action validateCustomerID { validation validateCustomer; }
  determine action validateAgencyID { validation validateAgency; }
  determine action validateDateRange { validation validateDates; }

  side effects
  { field BookingFee affects field TotalPrice;
    determine action validateCustomerID executed on field CustomerID affects messages;
    determine action validateAgencyID executed on field AgencyID affects messages;
    determine action validateDateRange executed on field BeginDate, field EndDate affects messages; }

  draft action Resume with additional implementation;
  draft action Edit;
  draft action Activate optimized;
  draft action Discard;

  draft determine action Prepare
  {
    validation validateAgency;
    validation validateCustomer;
    validation validateDates;
    validation validateCurrencyCode;
    validation Booking~validateCustomer;
    validation Booking~validateConnection;
    validation Booking~validateCurrencyCode;
    validation BookingSupplement~validateSupplement;
    validation BookingSupplement~validateCurrencyCode;
  }

  mapping for ztravel303_a
    {
      TravelUUID         = travel_uuid;
      TravelID           = travel_id;
      AgencyID           = agency_id;
      CustomerID         = customer_id;
      BeginDate          = begin_date;
      EndDate            = end_date;
      BookingFee         = booking_fee;
      TotalPrice         = total_price;
      CurrencyCode       = currency_code;
      Description        = description;
      OverallStatus      = overall_status;
      LocalCreatedBy     = local_created_by;
      LocalCreatedAt     = local_created_at;
      LocalLastChangeBy  = local_last_change_by;
      LocalLastChangedAt = local_last_changed_at;
      LastChangedAt      = last_changed_at;
    }
}

define behavior for zr_bookings303_a alias Booking
implementation in class zbp_r_bookings_a unique
persistent table zbookings303_a
draft table zbookings303_d
lock dependent by _Travel
authorization dependent by _Travel
etag master LocalLastChangeAt
{
  update;
  delete;
  association _BookingSupplement { create ( authorization : update ); with draft; }

  association _Travel { with draft; }

  field ( numbering : managed, readonly ) BookingUUID;
  field ( readonly ) TravelUUID, BookingID, BookingDate, LocalLastChangeAt;
  field ( mandatory ) CustomerID, AirlineID, ConnectionID, FlightDate, CurrencyCode;

  determination setBookingNumber on save { create; }
  determination setBookingDate on save { create; }
  determination calculateTotalPrice on modify { create; field FlightPrice, CurrencyCode; }

  validation validateCustomer on save { create; field CustomerID; }
  validation validateConnection on save { create; field AirlineID, ConnectionID, FlightDate; }
  validation validateCurrencyCode on save { create; field CurrencyCode; }

  side effects { field FlightPrice affects field _Travel.TotalPrice; }

  mapping for zbookings303_a
    {
      BookingUUID   = booking_uuid;
      TravelUUID    = parent_uuid;
      BookingID     = booking_id;
      BookingDate   = booking_date;
      CustomerID    = customer_id;
      AirlineID     = carrier_id;
      ConnectionID  = connection_id;
      FlightDate    = flight_date;
      FlightPrice   = flight_price;
      CurrencyCode  = currency_code;
      BookingStatus = booking_status;
    }
}

define behavior for zr_booksuppl303_a alias BookingSupplement
implementation in class zbp_r_booksuppl303_a unique
persistent table zbksuppl303_a
draft table zbksuppl303_d
lock dependent by _Travel
authorization dependent by _Travel
etag master LocalLastChangedAt
{
  update;
  delete;

  association _Travel { with draft; }
  association _Booking { with draft; }

  field ( numbering : managed, readonly ) BookSupplUUID;
  field ( readonly ) TravelUUID, BookingUUID, BookingSupplementID, LocalLastChangedAt;
  field ( mandatory ) SupplementID, CurrencyCode;

  determination setBookSupplNumber on save { create; }
  determination calculateTotalPrice on modify { create; field BookSupplPrice, CurrencyCode; }

  validation validateSupplement on save { create; field SupplementID; }
  validation validateCurrencyCode on save { create; field CurrencyCode; }

  side effects { field BookSupplPrice affects field _Travel.TotalPrice; }

  mapping for zbksuppl303_a
    {
      BookSupplUUID       = booksuppl_uuid;
      TravelUUID          = root_uuid;
      BookingUUID         = parent_uuid;
      BookingSupplementID = booking_supplement_id;
      SupplementID        = supplement_id;
      BookSupplPrice      = price;
      CurrencyCode        = currency_code;
      LocalLastChangedAt  = local_last_changed_at;
    }
}